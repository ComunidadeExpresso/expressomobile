describe("Backbone.browserStorage",function(){var e={string:"String",string2:"String 2",number:1337},t=function(e,t,n){throw new Error(t)};describe("on a Collection",function(){var n=Backbone.Model.extend({defaults:e}),r=Backbone.Collection.extend({model:n,browserStorage:new Backbone.BrowserStorage.local("collectionStore")}),i=new r;before(function(){i.on("error",t)}),before(function(){i.browserStorage._clear()}),before(function(){i.fetch()}),it("should use `localSync`",function(){assert.equal(Backbone.getSyncMethod(i),Backbone.localSync)}),it("should initially be empty",function(){assert.equal(i.length,0)}),describe("create",function(){var t;before(function(){t=i.create({})}),it("should have 1 model",function(){assert.equal(i.length,1)}),it("should have a populated model",function(){var n=_.clone(e);n.id=t.id,assert.deepEqual(t.toJSON(),n)}),it("should have assigned an `id` to the model",function(){assert.isDefined(t.id)}),it("should be saved to the localstorage",function(){assert.isNotNull(window.localStorage.getItem("collectionStore-"+t.id))})}),describe("get (by `id`)",function(){var e;before(function(){e=i.create({})}),it("should find the model with its `id`",function(){assert.equal(i.get(e.id),e)})}),describe("instances",function(){describe("save",function(){var t,n;before(function(){t=i.create({}),t.save({string:"String 0"}),i.fetch()}),it("should persist the changes",function(){assert.equal(t.get("string"),"String 0")}),describe("with a new `id`",function(){before(function(){n=i.create({}),n.save({id:1}),i.fetch()}),it("should have a new `id`",function(){assert.equal(n.id,1)}),it("should have kept its old properties",function(){var t=_.clone(e);t.id=1,assert.deepEqual(n.toJSON(),t)}),it("should be saved in localstorage by new id",function(){assert.isNotNull(window.localStorage.getItem("collectionStore-1"))})})}),describe("destroy",function(){var e,t;before(function(){_(5).times(function(){i.create()})}),before(function(){_.each(i.toArray(),function(e){e.destroy()}),e=i.length}),before(function(){i.fetch(),t=i.length}),it("should have removed all items from the collection",function(){assert.equal(e,0)}),it("should have removed all items from the store",function(){assert.equal(t,0)})}),describe("with a different `idAttribute`",function(){var t=Backbone.Model.extend({defaults:e,idAttribute:"_id"}),n=Backbone.Collection.extend({model:t,browserStorage:new Backbone.BrowserStorage.local("collection2Store")}),r=new n;before(function(){r.create()}),it("should have used the custom `idAttribute`",function(){assert.equal(r.first().id,r.first().get("_id"))})})})}),describe("on a Model",function(){var t=Backbone.Model.extend({defaults:e,browserStorage:new Backbone.BrowserStorage.local("modelStore")}),n=new t;before(function(){n.browserStorage._clear()}),it("should use `localSync`",function(){assert.equal(Backbone.getSyncMethod(n),Backbone.localSync)}),describe("fetch",function(){it("should fire sync event on fetch",function(n){var r=new t(e);r.on("sync",function(){n()}),r.fetch()})}),describe("save",function(){before(function(){n.save(),n.fetch()}),it("should have assigned an `id` to the model",function(){assert.isDefined(n.id)}),it("should be saved to the localstorage",function(){assert.isNotNull(window.localStorage.getItem("modelStore-"+n.id))}),describe("with new attributes",function(){before(function(){n.save({number:42}),n.fetch()}),it("should persist the changes",function(){assert.deepEqual(n.toJSON(),_.extend(_.clone(e),{id:n.id,number:42}))})}),describe("fires events",function(){before(function(){this.model=new t}),after(function(){this.model.destroy()}),it("should fire sync event on save",function(e){this.model.on("sync",function(){this.model.off("sync"),e()},this),this.model.save({foo:"baz"})})})}),describe("destroy",function(){before(function(){n.destroy()}),it("should have removed the instance from the store",function(){assert.lengthOf(t.prototype.browserStorage.findAll(),0)})})}),describe("Error handling",function(){var t=Backbone.Model.extend({defaults:e,browserStorage:new Backbone.BrowserStorage.local("modelStore")});describe("private browsing",function(){var n=new t,r=window.localStorage.setItem,i=n.browserStorage._storageSize,s;before(function(t){n.browserStorage._clear(),n.browserStorage._storageSize=function(){return 0},window.localStorage.setItem=function(){var e=new Error;throw e.code=DOMException.QUOTA_EXCEEDED_ERR,e},n.save(e,{error:function(e,n){s=n,t()}})}),it("should return the error in the error callback",function(){assert.equal(s,"Private browsing is unsupported")}),it("should throw an error event",function(e){n.on("error",function(){e()}),n.save()}),after(function(){n.browserStorage._storageSize=i,window.localStorage.setItem=r})})})}),describe("Without Backbone.browserStorage",function(){describe("on a Collection",function(){var e=Backbone.Collection.extend(),t=new e;it("should use `ajaxSync`",function(){assert.equal(Backbone.getSyncMethod(t),Backbone.ajaxSync)})}),describe("on a Model",function(){var e=Backbone.Model.extend(),t=new e;it("should use `ajaxSync`",function(){assert.equal(Backbone.getSyncMethod(t),Backbone.ajaxSync)})})}),describe("AMD",function(){require.config({paths:{jquery:"support/jquery",underscore:"support/underscore",backbone:"support/backbone",browserstorage:"../backbone.browserStorage"}});var e;before(function(t){require(["browserstorage"],function(n){e=n,t()})}),it("should be the same as the non-amd usage",function(){assert.equal(Backbone.BrowserStorage,e)})});
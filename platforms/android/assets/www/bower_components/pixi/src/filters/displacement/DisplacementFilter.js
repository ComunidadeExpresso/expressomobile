function DisplacementFilter(e,t){var n=new core.Matrix;e.renderable=!1,core.AbstractFilter.call(this,fs.readFileSync(__dirname+"/displacement.vert","utf8"),fs.readFileSync(__dirname+"/displacement.frag","utf8"),{mapSampler:{type:"sampler2D",value:e.texture},otherMatrix:{type:"mat3",value:n.toArray(!0)},scale:{type:"v2",value:{x:1,y:1}}}),this.maskSprite=e,this.maskMatrix=n;if(t===null||t===undefined)t=20;this.scale=new core.Point(t,t)}var core=require("../../core"),fs=require("fs");DisplacementFilter.prototype=Object.create(core.AbstractFilter.prototype),DisplacementFilter.prototype.constructor=DisplacementFilter,module.exports=DisplacementFilter,DisplacementFilter.prototype.applyFilter=function(e,t,n){var r=e.filterManager;r.calculateMappedMatrix(t.frame,this.maskSprite,this.maskMatrix),this.uniforms.otherMatrix.value=this.maskMatrix.toArray(!0),this.uniforms.scale.value.x=this.scale.x*(1/t.frame.width),this.uniforms.scale.value.y=this.scale.y*(1/t.frame.height);var i=this.getShader(e);r.applyFilter(i,t,n)},Object.defineProperties(DisplacementFilter.prototype,{map:{get:function(){return this.uniforms.mapSampler.value},set:function(e){this.uniforms.mapSampler.value=e}}});